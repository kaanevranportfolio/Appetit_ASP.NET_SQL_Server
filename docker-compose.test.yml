services:
  # The test runner service
  restaurant-api-tests:
    build:
      context: .
      dockerfile: Dockerfiles/Dockerfile.backend.tests
    environment:
      - ASPNETCORE_ENVIRONMENT=Testing
      - ConnectionStrings__DefaultConnection=Server=sqlserver-test;Database=${DB_NAME}_Test;User Id=${DB_USER};Password=${DB_PASSWORD};TrustServerCertificate=true
      - KEEP_ALIVE=true
    depends_on:
      sqlserver-test:
        condition: service_healthy # Let's use the health check!
    networks:
      - restaurant-test-network
    volumes:
      - ./TestResults:/app/TestResults

  # The test database service
  sqlserver-test:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${DB_PASSWORD}
      - MSSQL_PID=Express
    ports:
      - "1434:1433"
    networks:
      - restaurant-test-network
    healthcheck:
      # This port check is reliable and doesn't need sqlcmd
      test: ["CMD-SHELL", "timeout 1 bash -c '</dev/tcp/localhost/1433' && echo 'SQL Server is ready' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

volumes:
  sqlserver_test_data:

networks:
  restaurant-test-network:
    driver: bridge